{"version":3,"sources":["config.js","Movies.js","Home.js","component/Spinner.js","SingleMovie.js","App.js","serviceWorker.js","index.js"],"names":["config","Movie","props","react_default","a","createElement","className","src","image","alt","title","length","concat","toUpperCase","slice","style","padding","react_router_dom","to","id","width","Home","state","movieLsit","_this2","this","axios","get","then","response","movieData","data","results","setState","catch","err","console","log","movies","map","movie","i","Movies","key","poster_path","content","overview","Component","Spinner","SingleMovie","movieId","match","params","res","original_title","vote_average","status","src_component_Spinner","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93a7ce3f.chunk.js","sourcesContent":["export default {\n  nowPlayingUrl: 'https://api.themoviedb.org/3/movie/now_playing',\n  apiKey: '4dac77c42f2dcbeb90b2a72682d71a10',\n  imageUrl: 'http://image.tmdb.org/t/p/w300',\n  singleMovieUrl: 'https://api.themoviedb.org/3/movie/'\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n// import classes from  './Movies.module.css';\n\nconst Movie = (props) => {\n  return (\n    <div className='col s12 m4 l3'>\n      <div className='card'>\n        <div className='card-image'>\n          <img src={props.image} alt='' />\n          {/* <span ></span> */}\n        </div>\n        <div className='card-content black '>\n          {/* <p>{props.content}</p> */}\n          <span className='card-title green-text text-accent-2'>\n            <strong>\n            {props.title.length > 15 ? \n           `${props.title.toUpperCase().slice(0, 20)}...` : \n           props.title.toUpperCase()}\n            </strong>\n          </span>\n        </div>\n        <div className='card-action grey darken-1' style={{ padding: '2px 4px' }}>\n          <Link to={`/movie/${props.id}`}>\n            <button style={{width:'100%'}} className='btn waves-light waves-effect'>More</button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport config from './config';\nimport Movies from './Movies';\n// import { BrowserRouter as Router, Route } from 'react-router-dom';\n\n\nclass Home extends Component {\n  state = {\n    movieLsit: []\n  };\n  componentDidMount() {\n    axios\n      .get(`${config.nowPlayingUrl}?api_key=${config.apiKey}`)\n      .then(response => {\n        const movieData = response.data.results;\n        this.setState({ movieLsit: movieData });\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    const movies = this.state.movieLsit.map((movie, i) => {\n      return (\n        <Movies\n          key={i}\n          title={movie.title}\n          image={`${config.imageUrl}${movie.poster_path}`}\n          content={movie.overview}\n          id={movie.id}\n        />\n      );\n    });\n    return (\n      <div className='row'>\n          {movies}\n        </div>\n\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './Spinner.css'\nconst Spinner = () => <div className=\"Loader\">Loading...</div>\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport config from './config';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Spinner from './component/Spinner';\n\nclass SingleMovie extends Component {\n  state = {\n    data: null\n  };\n\n  componentDidMount() {\n    const movieId = this.props.match.params.movieId;\n    axios\n      .get(`${config.singleMovieUrl}${movieId}?api_key=${config.apiKey}`)\n      .then(res => {\n        const data = res.data;\n        this.setState({ data });\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    console.log(this.state.data);\n    const movie = this.state.data;\n    return (\n      <div>\n        {movie ? (\n          <div className='grey darken-3 lime-text text-darken-2'>\n            <div className=\"container \">\n              <img src={`${config.imageUrl}${movie.poster_path}`} alt='movie' />\n              <div >Title: {movie.title.toUpperCase()}</div>\n              <div>Original Title: {movie.original_title} <span>(ID:{movie.id})</span> </div>\n              <h5><strong><i className=\"material-icons\">thumb_up</i> : {movie.vote_average}</strong></h5>\n              <div>Status: {movie.status}</div>\n              <p>Movie Overview:{movie.overview} </p>\n              <Link to='/'>\n                <button className='btn lime darken-2 section black-text'>Back to Home</button>\n              </Link>\n            </div>\n          </div>\n        ) : (\n          <Spinner />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SingleMovie;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './Home';\nimport SingleMovie from './SingleMovie';\n\nfunction App() {\n  return (\n      <Router>\n      <div className=\"App\">\n        <Route exact path='/' component={Home} />\n        <Route path='/movie/:movieId' component={SingleMovie} />\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n\n// https://api.themoviedb.org/3/movie/550?api_key=4dac77c42f2dcbeb90b2a72682d71a10\n\n// const apiKey = \"4dac77c42f2dcbeb90b2a72682d71a10\";\n// const singleMovieUrl = \"https://api.themoviedb.org/3/movie/\"\n// const nowPlayingUrl = \"https://api.themoviedb.org/3/movie/now_playing\";\n// const imageUrl = \"http://image.tmdb.org/t/p/w300\";\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}